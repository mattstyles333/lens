{"remainingRequest":"/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/src/views/components/NavPillsSection.vue?vue&type=template&id=63f391ef&","dependencies":[{"path":"/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/src/views/components/NavPillsSection.vue","mtime":1576662228000},{"path":"/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
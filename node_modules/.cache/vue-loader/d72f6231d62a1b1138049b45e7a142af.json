{"remainingRequest":"/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/src/views/presentation/Overview.vue?vue&type=template&id=0240ad2a&","dependencies":[{"path":"/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/src/views/presentation/Overview.vue","mtime":1576662228000},{"path":"/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/envisible/Documents/code/vue-material-kit-pro-v1.2.2/vue-material-kit-v1.2.2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9InNlY3Rpb24gc2VjdGlvbi1vdmVydmlldyI+CiAgPGRpdgogICAgY2xhc3M9InNlY3Rpb24gc2VjdGlvbi1mZWF0dXJlcy01IHNlY3Rpb24taW1hZ2UiCiAgICA6c3R5bGU9ImZlYXR1cmVzNSIKICA+CiAgICA8ZGl2IGNsYXNzPSJtZC1sYXlvdXQiPgogICAgICA8ZGl2CiAgICAgICAgY2xhc3M9Im1kLWxheW91dC1pdGVtIG1kLXNpemUtNjYgbWQtc21hbGwtc2l6ZS0xMDAgbXgtYXV0byB0ZXh0LWNlbnRlciIKICAgICAgPgogICAgICAgIDxoMiBjbGFzcz0idGl0bGUiPgogICAgICAgICAgWW91ciBsaWZlIHdpbGwgYmUgbXVjaCBlYXNpZXIKICAgICAgICA8L2gyPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgPGRpdiBjbGFzcz0ibWQtbGF5b3V0Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtZC1sYXlvdXQtaXRlbSBtZC1zaXplLTI1IG1kLXNtYWxsLXNpemUtMTAwIj4KICAgICAgICAgIDxpbmZvLWFyZWFzCiAgICAgICAgICAgIHRleHQtY2VudGVyCiAgICAgICAgICAgIGljb249ImZvcm1hdF9ib2xkIgogICAgICAgICAgPgogICAgICAgICAgICA8aDQKICAgICAgICAgICAgICBzbG90PSJ0aXRsZSIKICAgICAgICAgICAgICBjbGFzcz0iaW5mby10aXRsZSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIEJvb3RzdHJhcCBHcmlkCiAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICBzbG90PSJjb250ZW50IgogICAgICAgICAgICAgIGNsYXNzPSJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgRW5qb3kgdGhlIGZsdWlkIGdyaWQgc3lzdGVtIGJhc2VkIG9uIDEyIGNvbHVtbnMuIE1hdGVyaWFsIEtpdAogICAgICAgICAgICAgICAgUFJPIGlzIGJ1aWx0IG92ZXIgQm9vdHN0cmFwIGFuZCBoYXMgYWxsIHRoZSBiZW5lZml0cyB0aGF0IHRoZQogICAgICAgICAgICAgICAgZnJhbWV3b3JrIGNvbWVzIHdpdGguCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvaW5mby1hcmVhcz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJtZC1sYXlvdXQtaXRlbSBtZC1zaXplLTI1IG1kLXNtYWxsLXNpemUtMTAwIj4KICAgICAgICAgIDxpbmZvLWFyZWFzCiAgICAgICAgICAgIHRleHQtY2VudGVyCiAgICAgICAgICAgIGljb249InBob25lbGluayIKICAgICAgICAgID4KICAgICAgICAgICAgPGg0CiAgICAgICAgICAgICAgc2xvdD0idGl0bGUiCiAgICAgICAgICAgICAgY2xhc3M9ImluZm8tdGl0bGUiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICBGdWxseSBSZXNwb25zaXZlCiAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICBzbG90PSJjb250ZW50IgogICAgICAgICAgICAgIGNsYXNzPSJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgVGhpcyBCb290c3RyYXAga2l0IGlzIGJ1aWx0IG1vYmlsZS1maXJzdCBhbmQgbG9va3MgYW1hemluZyBvbgogICAgICAgICAgICAgICAgYW55IGRldmljZS4gUmVnYXJkbGVzcyBvZiB0aGUgc2NyZWVuIHNpemUsIHRoZSB3ZWJzaXRlIGNvbnRlbnQKICAgICAgICAgICAgICAgIHdpbGwgbmF0dXJhbGx5IGZpdCB0aGUgZ2l2ZW4gcmVzb2x1dGlvbi4KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9pbmZvLWFyZWFzPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1kLWxheW91dC1pdGVtIG1kLXNpemUtMjUgbWQtc21hbGwtc2l6ZS0xMDAiPgogICAgICAgICAgPGluZm8tYXJlYXMKICAgICAgICAgICAgdGV4dC1jZW50ZXIKICAgICAgICAgICAgaWNvbj0iYWNjZXNzX3RpbWUiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxoNAogICAgICAgICAgICAgIHNsb3Q9InRpdGxlIgogICAgICAgICAgICAgIGNsYXNzPSJpbmZvLXRpdGxlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgU2F2ZSBUaW1lCiAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICBzbG90PSJjb250ZW50IgogICAgICAgICAgICAgIGNsYXNzPSJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgVXNpbmcgdGhlIE1hdGVyaWFsIEtpdCBQUk8gd2lsbCBzYXZlIHlvdSBsYXJnZSBhbW91bnQgb2YgdGltZS4KICAgICAgICAgICAgICAgIFlvdSBkb24ndCBoYXZlIHRvIHdvcnJ5IGFib3V0IGN1c3RvbWlzaW5nIHRoZSBiYXNpYyBCb290c3RyYXAKICAgICAgICAgICAgICAgIGRlc2lnbiBvciBnZW5lcmF0aW5nIG5ldyBjb21wb25lbnRzLgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2luZm8tYXJlYXM+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibWQtbGF5b3V0LWl0ZW0gbWQtc2l6ZS0yNSBtZC1zbWFsbC1zaXplLTEwMCI+CiAgICAgICAgICA8aW5mby1hcmVhcwogICAgICAgICAgICB0ZXh0LWNlbnRlcgogICAgICAgICAgICBpY29uPSJhdHRhY2hfbW9uZXkiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxoNAogICAgICAgICAgICAgIHNsb3Q9InRpdGxlIgogICAgICAgICAgICAgIGNsYXNzPSJpbmZvLXRpdGxlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgU2F2ZSBNb25leQogICAgICAgICAgICA8L2g0PgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgc2xvdD0iY29udGVudCIKICAgICAgICAgICAgICBjbGFzcz0iZGVzY3JpcHRpb24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIENyZWF0aW5nIHlvdXIgZGVzaWduIGZyb20gc2NyYXRjaCB3aXRoIGRlZGljYXRlZCBkZXNpZ25lcnMgY2FuCiAgICAgICAgICAgICAgICBiZSB2ZXJ5IGV4cGVuc2l2ZS4gVXNpbmcgYSBraXQgaXMgdGhlIGJlc3Qgb3B0aW9uIHRvIHN0YXJ0CiAgICAgICAgICAgICAgICB5b3VyIGRldmVsb3BtZW50IHdoaWxlIGJvb3RzdHJhcHBpbmcgeW91ciBidWRnZXQuCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvaW5mby1hcmVhcz4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJzZWN0aW9uLXRlc3RpbW9uaWFscyB0ZWFtLTMiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgPGRpdiBjbGFzcz0ibWQtbGF5b3V0Ij4KICAgICAgICA8ZGl2CiAgICAgICAgICBjbGFzcz0ibWQtbGF5b3V0LWl0ZW0gbWQtc2l6ZS02NiBtZC1zbWFsbC1zaXplLTEwMCBteC1hdXRvIHRleHQtY2VudGVyIgogICAgICAgID4KICAgICAgICAgIDxoMiBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICBUcnVzdGVkIGJ5IDMzMC4wMDArIFBlb3BsZQogICAgICAgICAgPC9oMj4KICAgICAgICAgIDxoNSBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgICAgICBUaGUgVUkgS2l0cywgVGVtcGxhdGVzIGFuZCBEYXNoYm9hcmRzIHRoYXQgd2UndmUgY3JlYXRlZCBhcmUgdXNlZAogICAgICAgICAgICBieSA8Yj4zMzAsMDAwKyB3ZWIgZGV2ZWxvcGVyczwvYj4gaW4gb3ZlcgogICAgICAgICAgICA8Yj41NzYuMDAwIFdlYiBQcm9qZWN0czwvYj4uIFRoaXMgaXMgd2hhdCBzb21lIG9mIHRoZW0gdGhpbms6CiAgICAgICAgICA8L2g1PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0ibWQtbGF5b3V0Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtZC1sYXlvdXQtaXRlbSBtZC1zaXplLTMzIG1kLXNtYWxsLXNpemUtMTAwIj4KICAgICAgICAgIDxwcm9maWxlLWNhcmQKICAgICAgICAgICAgY2FyZC1wbGFpbgogICAgICAgICAgICBzbWFsbC1pbWcKICAgICAgICAgICAgdHlwZT0iaG9yaXpvbnRhbCIKICAgICAgICAgICAgOnNoYWRvdy1ub3JtYWw9InRydWUiCiAgICAgICAgICAgIDpuby1jb2xvcmVkLXNoYWRvdz0idHJ1ZSIKICAgICAgICAgICAgOmNhcmQtaW1hZ2U9ImNhcmRQcm9maWxlLmNhcmRQcm9maWxlMSIKICAgICAgICAgID4KICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Q9ImNhcmRDb250ZW50Ij4KICAgICAgICAgICAgICA8aDQgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgS2hhbGRpIFlhc3MKICAgICAgICAgICAgICA8L2g0PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLWRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICJBcyBzb29uIGFzIEkgc2F3IHRoaXMga2l0LCBldmVyeXRoaW5nIGVsc2UgaXNuJ3QgdGhlIHNhbWUKICAgICAgICAgICAgICAgIGFueW1vcmUsIEkganVzdCBjYW4ndCBkZXNjcmliZSBpdCBndXlzISBUaGFuayB5b3UgZm9yIHRoaXMKICAgICAgICAgICAgICAgIHdvcmshIgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDwvcHJvZmlsZS1jYXJkPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1kLWxheW91dC1pdGVtIG1kLXNpemUtMzMgbWQtc21hbGwtc2l6ZS0xMDAiPgogICAgICAgICAgPHByb2ZpbGUtY2FyZAogICAgICAgICAgICBjYXJkLXBsYWluCiAgICAgICAgICAgIHNtYWxsLWltZwogICAgICAgICAgICB0eXBlPSJob3Jpem9udGFsIgogICAgICAgICAgICA6c2hhZG93LW5vcm1hbD0idHJ1ZSIKICAgICAgICAgICAgOm5vLWNvbG9yZWQtc2hhZG93PSJ0cnVlIgogICAgICAgICAgICA6Y2FyZC1pbWFnZT0iY2FyZFByb2ZpbGUuY2FyZFByb2ZpbGUyIgogICAgICAgICAgPgogICAgICAgICAgICA8dGVtcGxhdGUgc2xvdD0iY2FyZENvbnRlbnQiPgogICAgICAgICAgICAgIDxoNCBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICBKb3NoIE11cnJheQogICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgIkdyZWF0IGtpdCEgVXNlZCB0aGlzIGZvciBhIGNsaWVudCBhbHJlYWR5IGFuZCBoZSBpcyBvdmVyIHRoZQogICAgICAgICAgICAgICAgbW9vbi4gS2VlcCB1cCB0aGUgZ29vZCB3b3JrIENyZWF0aXZlIFRpbSEgMTAvMTAgZm9yIGRlc2lnbiwKICAgICAgICAgICAgICAgIGNvbG91cnMsIGFuZCB0aGUgZmVlbCBvZiB0aGUga2l0LiIKICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICA8L3Byb2ZpbGUtY2FyZD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJtZC1sYXlvdXQtaXRlbSBtZC1zaXplLTMzIG1kLXNtYWxsLXNpemUtMTAwIj4KICAgICAgICAgIDxwcm9maWxlLWNhcmQKICAgICAgICAgICAgY2FyZC1wbGFpbgogICAgICAgICAgICBzbWFsbC1pbWcKICAgICAgICAgICAgdHlwZT0iaG9yaXpvbnRhbCIKICAgICAgICAgICAgOnNoYWRvdy1ub3JtYWw9InRydWUiCiAgICAgICAgICAgIDpuby1jb2xvcmVkLXNoYWRvdz0idHJ1ZSIKICAgICAgICAgICAgOmNhcmQtaW1hZ2U9ImNhcmRQcm9maWxlLmNhcmRQcm9maWxlMyIKICAgICAgICAgID4KICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Q9ImNhcmRDb250ZW50Ij4KICAgICAgICAgICAgICA8aDQgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgTWljaGFlbCBPbnVib2d1CiAgICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC1kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAiRGFtbiBEYW5pZWwhISEgVGhpcyBNYXRlcmlhbCBVSSBLaXQgaXMgZnJlc2ggQUYhIEFtYXppbmcKICAgICAgICAgICAgICAgIHdvcmshCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPC9wcm9maWxlLWNhcmQ+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJvdXItY2xpZW50cyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibWQtbGF5b3V0Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1kLWxheW91dC1pdGVtIG1kLXNpemUtMjUgbWQtc21hbGwtc2l6ZS0xMDAiPgogICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgOnNyYz0iY2xpZW50cy5jbGllbnQxIgogICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICA+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1kLWxheW91dC1pdGVtIG1kLXNpemUtMjUgbWQtc21hbGwtc2l6ZS0xMDAiPgogICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgOnNyYz0iY2xpZW50cy5jbGllbnQyIgogICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICA+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1kLWxheW91dC1pdGVtIG1kLXNpemUtMjUgbWQtc21hbGwtc2l6ZS0xMDAiPgogICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgOnNyYz0iY2xpZW50cy5jbGllbnQzIgogICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICA+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1kLWxheW91dC1pdGVtIG1kLXNpemUtMjUgbWQtc21hbGwtc2l6ZS0xMDAiPgogICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgOnNyYz0iY2xpZW50cy5jbGllbnQ0IgogICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICA+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+Cg=="},null]}